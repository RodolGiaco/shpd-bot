import os
import logging
import base64
from io import BytesIO
from PIL import Image
from openai import OpenAI
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

# --- Configuraci√≥n logging ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")


RESIZE_IMAGES = os.getenv("RESIZE_IMAGES", "false").lower() in ("1", "true", "yes")
MAX_IMAGE_WIDTH = int(os.getenv("MAX_IMAGE_WIDTH", "512"))

# --- OpenAI ---
API_KEY = os.getenv("OPENAI_API_KEY", "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")
client = OpenAI(api_key=API_KEY)
MODEL = "gpt-4o-mini"

SYSTEM_PROMPT = (
    "Act√∫a como un experto en biomecanica corporal especializado en propiocepci√≥n aplicada a t√©cnicas de calistenia. \n"
    "Eval√∫a la propiocepci√≥n de cada lado de 0% (muy mala propiocepci√≥n) a 100% (propiocepci√≥n perfecta). \n"
    "La imagen siempre sera sacada con la camara frontal y no sera una selfie lo cual no invierte los lados anatomicos"
    "Unicamente inviertes los lados anatomicos si la persona esta de espalda caso contrario la derecha anatomica es la derecha de la imagen"
    "Responde SIEMPRE siguiendo estrictamente este formato no superando los 300 token:\n\n"
    "An√°lisis:\n"
    "- Lado derecho anat√≥mico: [descripci√≥n breve, m√°ximo 2 l√≠neas]\n"
    "- Lado izquierdo anat√≥mico: [descripci√≥n breve, m√°ximo 2 l√≠neas]\n\n"
    "Propiocepci√≥n:\n"
    "- Lado derecho anat√≥mico: [porcentaje]%\n"
    "- Lado izquierdo anat√≥mico: [porcentaje]%\n\n"
    "Problema detectado:\n"
    "- [explicaci√≥n t√©cnica breve en orden de prioridad de acuerdo a cintura escapular, caderas, hombros, otro problema, m√°ximo 2 l√≠neas]\n\n"
    "No agregues nada fuera de este esquema. S√© conciso, evita extender las descripciones m√°s de lo indicado."
)

USER_PROMPT = (
    "Analyze the provided image of a person performing a calisthenic technique . Perform the following tasks:\n"
    "- Determine which side of the body is the person‚Äôs left and which is right using visual cues.\n"
    "- Describe the calisthenic exercise being performed, focusing on anatomical and proprioceptive details.\n"
    "- Comment on the person‚Äôs posture: note shoulder alignment, hip alignment, knee alignment, limb angles, any torso inclinations or rotations, and the person‚Äôs balance and stability.\n\n"
)
# --- Men√∫s y botones ---
MAIN_MENU = {
    "1": "Contratar servicio personalizado",
    "2": "Contratar servicio de propiocepci√≥n",
    "3": "¬øQu√© es la propiocepci√≥n?",
    "4": "¬øQui√©nes somos?",
    "5": "Rutina de calistenia gratuita",
    "6": "Volver al men√∫",
}
MENU_BUTTONS = [
    ["1. üìã Contratar servicio personalizado", "2. ü§∏‚Äç‚ôÇÔ∏è Contratar servicio de propiocepci√≥n"],
    ["3. ‚ùì ¬øQu√© es la propiocepci√≥n?",       "4. ‚ÑπÔ∏è ¬øQui√©nes somos?"],
    ["5. üèãÔ∏è Quiero mi Rutina!",                "6. üîÑ Volver al men√∫"],
]
PROP_MENU = {
    "1": "Prueba gratuita",
    "2": "Costos y pagar",
}
PROP_BUTTONS = [["1. Prueba gratuita", "2. Costos y pagar"]]
EXERCISES = {
    "1": "Handstand",
    "2": "Full Planche",
    "3": "Front Lever",
    "4": "Muscle Up",
    "5": "Dominadas",
    "6": "Flexiones",
}
EX_BUTTONS = [
    ["1. Handstand", "2. Full Planche"],
    ["3. Front Lever", "4. Muscle Up"],
    ["5. Dominadas",   "6. Flexiones"],
]
ROUTINE_MENU = [
    [
        InlineKeyboardButton("üè∑Ô∏è Gratis", callback_data="free_routine"),
        InlineKeyboardButton("üíé Paga",  callback_data="paid_routine")
    ]
]


def extract_choice(text: str) -> str:
    """Extrae el d√≠gito antes del punto o devuelve el texto si no hay formato 'n.'."""
    return text.split(".")[0] if "." in text else text

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Uso de context.chat_data para contar men√∫s mostrados por chat
    count = context.chat_data.get("menu_count", 0) + 1
    context.chat_data["menu_count"] = count
    logging.info(f"Men√∫ principal mostrado {count} veces en chat {update.effective_chat.id}")

    # Preservar datos de propiocepci√≥n (user_data)
    attempts = context.user_data.get("attempts_proprio")
    done = context.user_data.get("proprio_done")
    context.user_data.clear()
    if attempts:
        context.user_data["attempts_proprio"] = attempts
    if done:
        context.user_data["proprio_done"] = done

    # Mostrar men√∫
    await update.message.reply_text(
        "üëã <b>Bienvenido a Nexus</b>\nElige una opci√≥n:",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            MENU_BUTTONS, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    context.user_data["state"] = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    choice = extract_choice(text)
    lower = text.lower()
    state = context.user_data.get("state")

    # Saludo o reinicio
    if lower in ("hola", "hola!"):
        return await show_main_menu(update, context)

    # Flujo submen√∫ propiocepci√≥n
    if state == "awaiting_prop_option":
        if choice not in PROP_MENU:
            return await update.message.reply_text(
                "‚ùå Debes elegir 1 o 2.",
                reply_markup=ReplyKeyboardMarkup(
                    PROP_BUTTONS, resize_keyboard=True, one_time_keyboard=True
                ),
            )
        if choice == "1":
            # Prueba gratuita: verificar intento y elegir t√©cnica
            if context.user_data.get("proprio_done"):
                await update.message.reply_text(
                    "‚ùå Ya usaste tu prueba gratuita.",
                    reply_markup=ReplyKeyboardRemove(),
                )
                return await show_main_menu(update, context)
            await update.message.reply_text(
                "Elige la t√©cnica a evaluar:",
                reply_markup=ReplyKeyboardMarkup(
                    EX_BUTTONS, resize_keyboard=True, one_time_keyboard=True
                ),
            )
            context.user_data["state"] = "awaiting_exercise"
        else:
            # Costos y pago
            pay_btn = InlineKeyboardMarkup([[
                InlineKeyboardButton("üí≥ Pagar ahora", url="https://pago.nexuscalistenia.com")
            ]])
            await update.message.reply_text(
                "<b>Costos y pagar</b>\nServicio completo: $5000 pesos por mes hasta 8 consultas por dia.",
                parse_mode=ParseMode.HTML,
                reply_markup=pay_btn,
            )
            #await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())
            return await show_main_menu(update, context)
        return

    # Selecci√≥n de t√©cnica tras prueba gratuita
    if state == "awaiting_exercise":
        if choice not in EXERCISES:
            return await update.message.reply_text(
                "‚ùå Elige un n√∫mero del 1 al 6 para la t√©cnica.",
                reply_markup=ReplyKeyboardMarkup(
                    EX_BUTTONS, resize_keyboard=True, one_time_keyboard=True
                ),
            )
        context.user_data["exercise"] = EXERCISES[choice]
        await update.message.reply_text(
            f"Env√≠a una foto practicando <b>{EXERCISES[choice]}</b>.",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove(),
        )
        context.user_data["state"] = "awaiting_proprio_photo"
        return

        
    # Flujo principal del men√∫
    if choice not in MAIN_MENU:
        return await update.message.reply_text(
            "‚ùå Opci√≥n no v√°lida. Toca un bot√≥n.",
            reply_markup=ReplyKeyboardMarkup(
                MENU_BUTTONS, resize_keyboard=True, one_time_keyboard=True
            ),
        )

    # Opciones principales
    if choice == "2":
        # iniciar propiocepci√≥n (un intento)
        await update.message.reply_text(
            "Contratar propiocepci√≥n:",
            reply_markup=ReplyKeyboardMarkup(
                PROP_BUTTONS, resize_keyboard=True, one_time_keyboard=True
            ),
        )
        context.user_data["state"] = "awaiting_prop_option"
        return

    key = f"attempts_{choice}"
    if context.user_data.get(key):
        return await update.message.reply_text("‚ùå Solo un intento por acci√≥n.")
    context.user_data[key] = True

    if choice == "1":
        await update.message.reply_text(
            "<b>Servicio personalizado</b>\n"
            "‚Ä¢ 4 sesiones semanales\n"
            "‚Ä¢ Seguimiento v√≠a Telegram\n"
            "‚Ä¢ Ajustes mensuales\n\n"
            "<i>Contacto: contacto@nexuscalistenia.com</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove(),
        )
        return await show_main_menu(update, context)

    if choice == "3":
        await update.message.reply_text(
            "<b>ü§∏‚Äç‚ôÇÔ∏è ¬øQu√© es la propiocepci√≥n?</b>\n\n"
            "üîπ Es la capacidad de sentir y controlar la posici√≥n y el movimiento de tu cuerpo, sin necesidad de mirar.\n"
            "üîπ Permite mantener el equilibrio, la alineaci√≥n y la t√©cnica en cada ejercicio.\n\n"
            "üí™ En calistenia, una buena propiocepci√≥n mejora el control corporal, acelera el progreso y previene lesiones.\n\n"
            "üìç Ejemplo pr√°ctico: sentir y corregir la alineaci√≥n de tu pelvis durante un handstand.",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove(),
        )
        return await show_main_menu(update, context)

    if choice == "4":
        # Enviar el logo o imagen
        with open("nexus/logo-blanco.webp", "rb") as logo:
            await update.message.reply_sticker(sticker=logo)

        # Enviar el mensaje descriptivo
        await update.message.reply_text(
            "<b>üèãÔ∏è‚Äç‚ôÇÔ∏è ¬øQui√©nes somos?</b>\n\n"
            "‚ú® Nexus es el punto de conexi√≥n entre <b>el cuerpo y la mente</b>, donde el movimiento se vuelve consciente y el entrenamiento, una experiencia de autoconocimiento.\n\n"
            "üí° Creemos en la fuerza con prop√≥sito, en entender el cuerpo desde adentro, en la <b>propiocepci√≥n</b> como clave para moverte mejor, sin l√≠mites.\n\n"
            "ü§ù No se trata solo de entrenar, sino de sentir, conectar y potenciar cada movimiento con inteligencia.\n\n"
            "üöÄ <b>En Nexus el desaf√≠o es descubrir de qu√© est√°s hecho y hasta d√≥nde pod√©s llegar.</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove(),
        )
        return await show_main_menu(update, context)

    elif choice == "5":
        # Limpia teclado y lanza submen√∫ inline
        await update.message.reply_text(
            "<b>Selecciona tu rutina:</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(ROUTINE_MENU)
        )
        return
    


    # opci√≥n 6 o retorno
    return await show_main_menu(update, context)

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("proprio_done"):
        return await update.message.reply_text("Ya realizamos el an√°lisis.")
    if context.user_data.get("state") != "awaiting_proprio_photo":
        return await update.message.reply_text("Primero elige Prueba gratuita y t√©cnica.")

    photo = update.message.photo[-1]
    img_file = await photo.get_file()
    img_bytes = await img_file.download_as_bytearray()
    img = Image.open(BytesIO(img_bytes))

    # ‚Äî‚Äî‚Äî redimensi√≥n opcional ‚Äî‚Äî‚Äî
    if RESIZE_IMAGES:
        if img.width > MAX_IMAGE_WIDTH:
            nh = int(img.height * MAX_IMAGE_WIDTH / img.width)
            img = img.resize((MAX_IMAGE_WIDTH, nh), Image.LANCZOS)
            logging.info(f"Imagen redimensionada a {img.size}")
    else:
        logging.info("Redimensionamiento desactivado, usando tama√±o original")

    buf = BytesIO()
    img.save(buf, format="JPEG", quality=100)
    context.user_data["b64_image"] = base64.b64encode(buf.getvalue()).decode()
    await update.message.reply_text("Envia una imagen tomada con la camara frontal (Selfie ‚ùå!!))")


async def analyze_proprioception(update: Update, context: ContextTypes.DEFAULT_TYPE):
    exercise = context.user_data["exercise"]
    side = context.user_data["side"]
    b64 = context.user_data["b64_image"]
    user_prompt = (
            f"Analiza la imagen enviada con la tecnica {exercise} a nivel escapular y alineacion de cadera. \n"
            f"Indica qu√© lado anat√≥mico tiene peor propiocepci√≥n, cu√°nto porcentaje de propiocepci√≥n tiene cada lado, \n"
            f"Evalua si esta de espalda la persona para detectar que lado es el correcto."
        )
    resp = client.responses.create(
        model=MODEL,
        user=str(update.effective_user.id),
        input=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user",   "content": [
                {"type": "input_text",  "text": user_prompt},
                {"type": "input_image", "image_url": f"data:image/jpeg;base64,{b64}"}
            ]}
        ],
        max_output_tokens=200,
        temperature=0.0
    )
    # 1. Obt√©n la cadena cruda
    raw = resp.output_text

    # 2. Dale formato amigable
    formatted = format_proprioception_response(raw)

    # 3. Muestra al usuario con HTML y limpia el teclado
    await update.message.reply_text(
        formatted,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data["proprio_done"] = True
    #await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())
    #await show_main_menu(update, context)


async def free_routine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text=(
            "<b>Rutina Gratuita üÜì</b>\n\n"
            "1Ô∏è‚É£ <b>Calentamiento (√ó2):</b>\n"
            "   ‚Ä¢ Shoulder Rotations\n"
            "   ‚Ä¢ Elbow Rotations\n"
            "   ‚Ä¢ Arm Swings\n"
            "   ‚Ä¢ Wrist Rotations\n"
            "   ‚Ä¢ Band Shoulder Dislocates\n\n"
            "2Ô∏è‚É£ <b>Movilidad Din√°mica:</b>\n"
            "   ‚Ä¢ 15\" Hollow Body\n"
            "   ‚Ä¢ 10\" Forearm Plank\n"
            "   ‚Ä¢ Shoulder Taps √ó8\n"
            "   ‚Ä¢ Scapular Push-Ups √ó8\n"
            "   ‚Ä¢ Reverse Snow Angels √ó5\n\n"
            "3Ô∏è‚É£ <b>B√°sicos Espec√≠ficos (√ó3):</b>\n"
            "   ‚Ä¢ Planche Lean 20\" \n"
            "   ‚Ä¢ Tuck Back Lever 10\"\n"
            "   ‚Ä¢ Skin the Cat √ó5\n\n"
            "4Ô∏è‚É£ <b>B√°sicos (√ó3):</b>\n"
            "   ‚Ä¢ Pull-Ups √ó8\n"
            "   ‚Ä¢ Push-Ups √ó12\n"
            "   ‚Ä¢ Dips √ó10\n"
            "   ‚Ä¢ Air Squats √ó15\n\n"
            "5Ô∏è‚É£ <b>Enfriamiento:</b>\n"
            "   ‚Ä¢ Chest Stretch 30\" por lado\n"
            "   ‚Ä¢ Child‚Äôs Pose 30\"\n"
            "   ‚Ä¢ Shoulder Cross-Body 30\" por lado\n"
            "   ‚Ä¢ Butterfly Stretch 30\"\n\n"
            "¬°Disfruta tu entrenamiento! üí™"
        ),
        parse_mode=ParseMode.HTML
    )
    # vuelve al men√∫ principal tras unos segundos
    await show_main_menu(update, context)

async def paid_routine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Acknowledge the callback to remove the ‚Äúloading‚Äù state
    await update.callback_query.answer()
    # Construimos un InlineKeyboard con la tarjeta y enlace de pago
    pay_btn = InlineKeyboardMarkup([[
        InlineKeyboardButton("üí≥ Pagar servicio de propiocepci√≥n", url="https://pago.nexuscalistenia.com")
    ]])
    # Editamos el mensaje original para mostrar solo el bot√≥n de pago
    await update.callback_query.edit_message_text(
        text=(
            "<b>Servicio de propiocepci√≥n Premium</b>\n\n"
            "Haz clic en el bot√≥n para proceder al pago y activar tu an√°lisis personalizado."
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=pay_btn
    )
def format_proprioception_response(raw: str) -> str:
    """
    Convierte la respuesta cruda de OpenAI en un mensaje
    con emojis, negritas y vi√±etas para Telegram.
    """
    lines = raw.splitlines()
    sections = {"An√°lisis": [], "Propiocepci√≥n": [], "Problema detectado": []}
    current = None

    for line in lines:
        if line.startswith("An√°lisis"):
            current = "An√°lisis";  continue
        if line.startswith("Propiocepci√≥n"):
            current = "Propiocepci√≥n";  continue
        if line.startswith("Problema detectado"):
            current = "Problema detectado";  continue
        if current and line.strip().startswith("-"):
            sections[current].append(line.lstrip("- ").strip())

    parts = []
    if sections["An√°lisis"]:
        parts.append("üîé <b>An√°lisis</b>")
        parts += [f"‚Ä¢ {item}" for item in sections["An√°lisis"]]
    if sections["Propiocepci√≥n"]:
        parts.append("\nüß† <b>Propiocepci√≥n</b>")
        parts += [f"‚Ä¢ {item}" for item in sections["Propiocepci√≥n"]]
    if sections["Problema detectado"]:
        parts.append("\n‚ö†Ô∏è <b>Problema Detectado</b>")
        parts += [f"‚Ä¢ {item}" for item in sections["Problema detectado"]]

    parts.append("\nSi tienes dudas, ¬°escr√≠beme! üòä")
    return "\n".join(parts)


if __name__ == "__main__":
    app = ApplicationBuilder()\
        .token(os.getenv("TELEGRAM_TOKEN", "7600712992:AAGKYF0lCw7h7B-ROthuOKlb90QZM20MZis"))\
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    # Al construir el bot:
    app.add_handler(CallbackQueryHandler(free_routine, pattern="^free_routine$"))
    app.add_handler(CallbackQueryHandler(paid_routine, pattern="^paid_routine$"))


    app.run_polling()
